{"version":3,"sources":["logo.svg","components/BabylonScene.js","components/Playground.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","window","earcut","BabylonScene","onResizeWindow","engine","resize","onCanvasLoaded","c","canvas","preventDefault","e","onwheel","onmousewheel","focus","onKeyDown","props","onKeyUp","this","Engine","antialias","engineOptions","adaptToDeviceRatio","scene","Scene","onSceneMount","runRenderLoop","onRender","render","addEventListener","removeEventListener","ref","style","width","height","outline","React","Component","defaultProps","SHOW_WORLD_AXIS","Playground","gravityVector","Vector3","physicsPlugin","CannonJSPlugin","enablePhysics","camera","createCamera","createSky","createDirectionalLight","createHemisphericLight","createStaticMesh","showWorldAxis","size","concreteMaterial","createConcreteMaterial","pbr","createBricksMaterial","land","createGround","createFloor","ceiling","createCeiling","createLeftWall","createRightWall","createBackWall","createFrontWall","platform","createPlatform","egg","createEgg","sphere","createSphere","setEggImpostor","onSphereHitEgg","main","collided","physicsImpostor","dispose","parent","position","onSphereHitGround","Math","abs","getLinearVelocity","y","touching","onSpacePressed","boost","getBoost","console","log","applyImpulse","keyDirection","getAbsolutePosition","resetPosAndAngle","key","friction","accelerateInterval","self","setInterval","accelerate","apply","getChildren","includes","x","z","vel","setLinearVelocity","setAngularVelocity","rotation","clearInterval","LinesBuilder","CreateLines","points","Zero","color","Color3","levelHeight","levelWidth","levelDepth","ArcRotateCamera","PI","fov","minZ","skyMaterial","SkyMaterial","backFaceCulling","luminance","inclination","azimuth","BoxBuilder","CreateBox","material","direct","DirectionalLight","sg","ShadowGenerator","usePoissonSampling","HemisphericLight","intensity","light","PointLight","light2","GroundBuilder","CreateGround","sideOrientation","Mesh","DOUBLESIDE","PhysicsImpostor","PlaneImpostor","mass","restitution","stiffness","visibility","faceUV","getBoxWrapUV","floor","depth","receiveShadows","defaultMaterial","StandardMaterial","diffuseColor","BoxImpostor","leftWall","rightWall","PBRMaterial","forceIrradianceInFragment","albedoTexture","Texture","bumpTexture","useRoughnessFromMetallicTextureAlpha","useRoughnessFromMetallicTextureGreen","useMetallnessFromMetallicTextureBlue","metallicTexture","invertNormalMapX","invertNormalMapY","CreateGroundFromHeightMap","subdivisions","maxHeight","onReady","backWall","tmpBackWall","newWall","createInstance","wallHeight","frontWall","PlaneBuilder","CreatePlane","BACKSIDE","textureSize","Array","i","Vector4","getShadowMap","renderList","push","SphereBuilder","CreateSphere","diameter","segments","albedoColor","metallic","roughness","SphereImpostor","registerOnPhysicsCollide","isNotSpeeding","isTouchingGround","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3b66c43a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Engine } from '@babylonjs/core/Engines/engine'\r\nimport { Scene } from '@babylonjs/core/scene'\r\n\r\n// pepjs needed for babylon touch event\r\nimport 'pepjs'\r\n\r\n// earcut needed by babylon's polygon extruder\r\nimport earcut from 'earcut'\r\nwindow.earcut = earcut\r\n\r\nclass BabylonScene extends React.Component {\r\n  static propTypes = {\r\n    engineOptions: PropTypes.object,\r\n    antialias: PropTypes.bool,\r\n    adaptToDeviceRatio: PropTypes.bool,\r\n    onSceneMount: PropTypes.func.isRequired,\r\n    onKeyDown: PropTypes.func.isRequired,\r\n    onRender: PropTypes.func.isRequired,\r\n    onKeyUp: PropTypes.func.isRequired\r\n  }\r\n\r\n  static defaultProps = {\r\n    antialias: true,\r\n    adaptToDeviceRatio: false\r\n  }\r\n\r\n  componentDidMount () {\r\n    // setup engine\r\n    this.engine = new Engine(\r\n      this.canvas,\r\n      this.props.antialias,\r\n      this.props.engineOptions,\r\n      this.props.adaptToDeviceRatio\r\n    )\r\n    // create scene\r\n    this.scene = new Scene(this.engine)\r\n    \r\n    // call scene mounted handler\r\n    this.props.onSceneMount({\r\n      scene: this.scene,\r\n      engine: this.engine,\r\n      canvas: this.canvas\r\n    });\r\n    // start render loop\r\n    this.engine.runRenderLoop(() => {\r\n      if (this.scene) {\r\n        this.props.onRender();\r\n        this.scene.render()\r\n      }\r\n    })\r\n    // handle resize\r\n    window.addEventListener('resize', this.onResizeWindow)\r\n  }\r\n\r\n  componentWillUnmount () {\r\n    window.removeEventListener('resize', this.onResizeWindow)\r\n  }\r\n\r\n  onResizeWindow = () => {\r\n    if (this.engine) {\r\n      this.engine.resize()\r\n    }\r\n  }\r\n\r\n  onCanvasLoaded = c => {\r\n    if (c !== null) {\r\n      this.canvas = c\r\n      // avoid page scrolling\r\n      const preventDefault = e => e.preventDefault()\r\n      this.canvas.onwheel = preventDefault\r\n      this.canvas.onmousewheel = preventDefault\r\n      this.canvas.focus();\r\n    }\r\n  }\r\n  onKeyDown = (e) => {\r\n    this.props.onKeyDown(e);\r\n  }\r\n  onKeyUp = (e) => {\r\n    this.props.onKeyUp(e);\r\n  }\r\n  render () {\r\n    return (\r\n      <canvas\r\n        ref={this.onCanvasLoaded}\r\n        onKeyDown={this.onKeyDown}\r\n        onKeyUp={this.onKeyUp}\r\n        style={{ width: '100%', height: '100%', outline: 'none' }}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport default BabylonScene\r\n","import React from 'react'\r\n//import * as cannon from 'cannon';\r\nimport { CannonJSPlugin } from '@babylonjs/core/Physics/Plugins/cannonJSPlugin'\r\nimport { PhysicsImpostor } from '@babylonjs/core/Physics/physicsImpostor'\r\nimport { Vector3, Color3,Vector4 } from '@babylonjs/core/Maths/math'\r\nimport { ArcRotateCamera } from '@babylonjs/core/Cameras/arcRotateCamera'\r\nimport { DirectionalLight } from '@babylonjs/core/Lights/directionalLight'\r\nimport { PointLight } from '@babylonjs/core/Lights/pointLight'\r\nimport { HemisphericLight } from '@babylonjs/core/Lights/hemisphericLight'\r\nimport { ShadowGenerator } from '@babylonjs/core/Lights/Shadows/shadowGenerator'\r\nimport { ShadowGeneratorSceneComponent } from '@babylonjs/core/Lights/Shadows/shadowGeneratorSceneComponent'\r\n\r\n\r\nimport { StandardMaterial } from '@babylonjs/core/Materials/standardMaterial'\r\nimport { PBRMaterial } from '@babylonjs/core/Materials/PBR/pbrMaterial'\r\nimport { Texture } from '@babylonjs/core/Materials/Textures/texture'\r\n\r\nimport { LinesBuilder } from '@babylonjs/core/Meshes/Builders/linesBuilder'\r\nimport { PlaneBuilder } from '@babylonjs/core/Meshes/Builders/planeBuilder'\r\nimport { GroundBuilder } from '@babylonjs/core/Meshes/Builders/groundBuilder'\r\n\r\nimport { SphereBuilder } from '@babylonjs/core/Meshes/Builders/sphereBuilder'\r\nimport { BoxBuilder } from '@babylonjs/core/Meshes/Builders/boxBuilder'\r\nimport { Mesh } from '@babylonjs/core/Meshes/mesh'\r\n\r\nimport { SkyMaterial } from '@babylonjs/materials/sky'\r\n// required babylon side effects\r\nimport '@babylonjs/core/Animations/animatable'\r\nimport '@babylonjs/core/Physics/physicsEngineComponent'\r\n\r\n\r\nimport BabylonScene from './BabylonScene'\r\n\r\nconst SHOW_WORLD_AXIS = false;\r\nconst ATTACH_CAMERA = true;\r\n\r\nclass Playground extends React.Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.keyDirection = 0;\r\n    this.touching = true;\r\n    this.levelHeight = 40;\r\n    this.levelWidth = 150;\r\n    this.levelDepth = 4;\r\n  }\r\n\r\n  \r\n  // scene setup\r\n  onSceneMount = ({ canvas, scene, engine }) => {\r\n    window.scene = scene // for debug\r\n    this.scene = scene;\r\n    var gravityVector = new Vector3(0,-9.81, 0);\r\n    var physicsPlugin = new CannonJSPlugin();\r\n    scene.enablePhysics(gravityVector, physicsPlugin);\r\n    // camera\r\n    this.camera = this.createCamera(scene,canvas);\r\n    // sky (https://doc.babylonjs.com/extensions/sky)\r\n    this.createSky(scene);\r\n    // create light\r\n    //this.createLights(scene);\r\n    this.createDirectionalLight(scene);\r\n    this.createHemisphericLight(scene);\r\n    // scene\r\n    this.createStaticMesh({ scene })\r\n    // debug\r\n    if (SHOW_WORLD_AXIS) {\r\n      this.showWorldAxis({ size: 5, scene })\r\n    }\r\n  }\r\n\r\n  \r\n\r\n  createCamera(scene,canvas){\r\n    const camera = new ArcRotateCamera(\r\n      'arc-camera',\r\n      -Math.PI/2,\r\n      Math.PI/2,\r\n      60,\r\n      new Vector3(0,0,0),\r\n      scene\r\n    )\r\n    camera.fov = 0.6;\r\n    if(!ATTACH_CAMERA){\r\n      camera.setTarget(Vector3.Zero())\r\n      camera.attachControl(canvas, true)\r\n    }\r\n    camera.minZ = 0;\r\n    //camera.keysUp = [];camera.keysDown = [];\r\n    return camera;\r\n  }\r\n\r\n  createSky(scene){\r\n    const skyMaterial = new SkyMaterial('sky-material', scene)\r\n    skyMaterial.backFaceCulling = false\r\n    skyMaterial.luminance = 0.8\r\n    skyMaterial.inclination = 0.18\r\n    skyMaterial.azimuth = 0.27\r\n    const skybox = BoxBuilder.CreateBox('skybox', { size: 1000 }, scene)\r\n    skybox.material = skyMaterial\r\n  }\r\n\r\n  createDirectionalLight(scene){\r\n    const direct = new DirectionalLight(\"direct\",new Vector3(-1,-3,3),scene);\r\n    direct.position = new Vector3(10,this.levelHeight,-10);\r\n    this.sg = new ShadowGenerator(1024,direct);\r\n    this.sg.usePoissonSampling = true;\r\n  }\r\n\r\n  createHemisphericLight(scene){\r\n    const hemi = new HemisphericLight(\"hemi\",new Vector3(1,2,1),scene);\r\n    hemi.intensity = 0.3;\r\n  }\r\n\r\n  createLights(scene){\r\n    const light = new PointLight('light', new Vector3(this.levelWidth*3/4, 9, -200), scene)\r\n    const light2 = new PointLight('light', new Vector3(-this.levelWidth*3/4, 32, -200), scene)\r\n    light.intensity = .7\r\n    light2.intensity = 0.3\r\n  }\r\n\r\n  createStaticMesh = ({ scene }) => {\r\n    this.concreteMaterial = this.createConcreteMaterial(scene);\r\n    this.pbr = this.createBricksMaterial(scene);\r\n    this.land = this.createGround(scene);\r\n    this.createFloor(scene);\r\n    this.ceiling = this.createCeiling(scene);\r\n    this.createLeftWall(scene);\r\n    this.createRightWall(scene);\r\n    this.createBackWall(scene);\r\n    this.createFrontWall(scene);\r\n    this.platform = this.createPlatform(scene);    \r\n    this.egg = this.createEgg(scene);\r\n    this.sphere = this.createSphere(scene);\r\n    this.setEggImpostor();\r\n  }\r\n\r\n  createGround(scene){\r\n    const land = GroundBuilder.CreateGround(\r\n      'land',\r\n      { width: this.levelWidth,height: this.levelDepth, sideOrientation: Mesh.DOUBLESIDE },\r\n      scene\r\n    );\r\n    //land.material = defaultMaterial;\r\n    land.physicsImpostor = new PhysicsImpostor(land,PhysicsImpostor.PlaneImpostor,{mass:0, restitution: 0,stiffness:0,friction:1}, scene);\r\n    land.visibility = 0;\r\n    return land;\r\n  }\r\n\r\n  createFloor(scene){\r\n    const faceUV = this.getBoxWrapUV(this.levelWidth,2,this.levelDepth,5);\r\n    const floor = BoxBuilder.CreateBox(\r\n      'land',\r\n      { width: this.levelWidth,height: 2, sideOrientation: Mesh.DOUBLESIDE ,depth:this.levelDepth,faceUV:faceUV},\r\n      scene\r\n    )\r\n    //floor.rotation.x = Math.PI/2;\r\n    floor.position.y = -1;\r\n    floor.material = this.concreteMaterial;\r\n    floor.receiveShadows = true;\r\n  }\r\n\r\n  createCeiling(scene){\r\n    const defaultMaterial = new StandardMaterial('default-material', scene)\r\n    defaultMaterial.diffuseColor = new Color3(1, 1, 1)\r\n    const ceiling = BoxBuilder.CreateBox(\r\n      'ceiling',\r\n      { width: this.levelWidth,depth: this.levelDepth,height: 0.2 },\r\n      scene\r\n    )\r\n    \r\n    ceiling.position.y = 40;\r\n    ceiling.material = defaultMaterial;\r\n    ceiling.physicsImpostor = new PhysicsImpostor(ceiling,PhysicsImpostor.BoxImpostor,{mass:0}, scene);\r\n    return ceiling;\r\n  }\r\n\r\n  createLeftWall(scene){\r\n    const defaultMaterial = new StandardMaterial('default-material', scene)\r\n    defaultMaterial.diffuseColor = new Color3(1, 1, 1)\r\n    const leftWall = BoxBuilder.CreateBox(\r\n      'leftWall',\r\n      { width: this.levelHeight,depth: this.levelDepth,height: 0.2 },\r\n      scene\r\n    )\r\n    leftWall.rotation.z = Math.PI/2;\r\n    leftWall.position.y = 20;\r\n    leftWall.position.x = -this.levelWidth/2;\r\n    leftWall.material = defaultMaterial;\r\n    leftWall.physicsImpostor = new PhysicsImpostor(leftWall,PhysicsImpostor.BoxImpostor,{mass:0, restitution: 0.9}, scene);\r\n    leftWall.receiveShadows = true;\r\n  }\r\n\r\n  createRightWall(scene){\r\n    const defaultMaterial = new StandardMaterial('default-material', scene)\r\n    defaultMaterial.diffuseColor = new Color3(1, 1, 1)\r\n    const rightWall = BoxBuilder.CreateBox(\r\n      'rightWall',\r\n      { width: this.levelHeight,depth: this.levelDepth,height: 0.2 },\r\n      scene\r\n    )\r\n    rightWall.rotation.z = Math.PI/2;\r\n    rightWall.position.y = 20;\r\n    rightWall.position.x = this.levelWidth/2;\r\n    rightWall.material = defaultMaterial;\r\n    rightWall.physicsImpostor = new PhysicsImpostor(rightWall,PhysicsImpostor.BoxImpostor,{mass:0, restitution: 0.9}, scene);\r\n    rightWall.receiveShadows = true;\r\n  }\r\n\r\n  createBricksMaterial(scene){\r\n    const pbr = new PBRMaterial('bricks', scene);\r\n    pbr.forceIrradianceInFragment = true;\r\n    pbr.albedoTexture = new Texture(\"textures/bricks_rustic_albedo.png\", scene);\r\n    pbr.bumpTexture = new Texture(\"textures/bricks_rustic_normal.png\", scene);\r\n    pbr.useRoughnessFromMetallicTextureAlpha = false;\r\n    pbr.useRoughnessFromMetallicTextureGreen = true;\r\n    pbr.useMetallnessFromMetallicTextureBlue = true;\r\n    pbr.metallicTexture = new Texture(\"textures/bricks_rustic_metallic_roughness.png\", scene);\r\n    pbr.invertNormalMapX = true;\r\n    pbr.invertNormalMapY = true;\r\n    return pbr;\r\n  }\r\n\r\n  createBackWall(scene){\r\n    let wallWidth = 20;\r\n    let wallHeight = 20;\r\n    const backWall = GroundBuilder.CreateGroundFromHeightMap(\r\n      'backWall','textures/bricks_rustic_height.png',\r\n      { height:  wallHeight,width:wallWidth,\r\n        subdivisions:200,maxHeight:0.2,\r\n        onReady:(backWall)=>{\r\n          backWall.rotation.x= -Math.PI/2;\r\n    \r\n          backWall.material = this.pbr;\r\n          backWall.receiveShadows = true;\r\n          let tmpBackWall = new Mesh(\"tmpBackWall\",scene);\r\n          for(let x = 0;x<this.levelWidth;x += wallWidth){\r\n            for(let y = 0;y<this.levelHeight;y += wallHeight){\r\n              if(x === 0 && y === 0){\r\n                backWall.parent = tmpBackWall;\r\n                backWall.position = new Vector3(x,y,0);\r\n              }else{\r\n                let newWall = backWall.createInstance(\"wallTile\"+x+\"_\"+y);\r\n                newWall.parent = tmpBackWall;\r\n                newWall.position = new Vector3(x,y,0);\r\n              }\r\n            }\r\n          }\r\n          tmpBackWall.position.z = this.levelDepth/2;\r\n          tmpBackWall.position.y = this.levelHeight/2 - wallHeight/2;\r\n          tmpBackWall.position.x= -this.levelWidth/2;\r\n          tmpBackWall.physicsImpostor = new PhysicsImpostor(tmpBackWall,PhysicsImpostor.BoxImpostor,{mass:0, restitution: 0.1,friction:0.01}, scene);\r\n        }\r\n      },\r\n      scene\r\n    );\r\n    \r\n  }\r\n\r\n  createFrontWall(scene){\r\n    const frontWall = PlaneBuilder.CreatePlane(\r\n      'frontWall',\r\n      { height: this.levelWidth,width: this.levelHeight,sideOrientation: Mesh.BACKSIDE},\r\n      scene\r\n    )\r\n    frontWall.rotation.z= Math.PI/2;\r\n    frontWall.position.z = -this.levelDepth/2;\r\n    frontWall.position.y = this.levelHeight/2;\r\n    frontWall.physicsImpostor = new PhysicsImpostor(frontWall,PhysicsImpostor.BoxImpostor,{mass:0, restitution: 0.1,friction:0.01}, scene);\r\n  }\r\n\r\n  createConcreteMaterial(scene){\r\n    const pbr = new PBRMaterial('concrete', scene)\r\n    pbr.forceIrradianceInFragment = true;\r\n    pbr.albedoTexture = new Texture(\"textures/concrete_worn_albedo.png\", scene);\r\n    pbr.bumpTexture = new Texture(\"textures/concrete_worn_normal.png\", scene);\r\n    pbr.useRoughnessFromMetallicTextureAlpha = false;\r\n    pbr.useRoughnessFromMetallicTextureGreen = true;\r\n    pbr.useMetallnessFromMetallicTextureBlue = true;\r\n    pbr.metallicTexture = new Texture(\"textures/concrete_worn_metallic_roughness.png\", scene);\r\n    pbr.invertNormalMapX = true;\r\n    pbr.invertNormalMapY = true;\r\n    return pbr;\r\n  }\r\n\r\n  getBoxWrapUV(width,height,depth,textureSize){\r\n    /*\r\n    side 0 faces the positive z direction\r\n    side 1 faces the negative z direction\r\n    side 2 faces the positive x direction\r\n    side 3 faces the negative x direction\r\n    side 4 faces the positive y direction\r\n    side 5 faces the negative y direction\r\n    */\r\n    var faceUV = new Array(6);\r\n\r\n    for (var i = 0; i < 6; i++) {\r\n      if(i === 0 || i === 1){\r\n        faceUV[i] = new Vector4(0, 0,width/textureSize,height/textureSize);\r\n      }else if(i === 2 || i === 3){\r\n        faceUV[i] = new Vector4(0, 0,height/textureSize,depth/textureSize);\r\n      }else if(i === 4 || i === 5){\r\n        faceUV[i] = new Vector4(0, 0,depth/textureSize,width/textureSize);\r\n      }\r\n    }\r\n    return faceUV;\r\n  }\r\n\r\n  createPlatform(scene){\r\n    const width = 20;\r\n    const height = 2;\r\n    const faceUV = this.getBoxWrapUV(width,height,this.levelDepth,5);\r\n    const platform = BoxBuilder.CreateBox(\r\n      'ceiling',\r\n      { width: width,depth: this.levelDepth,height: height ,faceUV:faceUV},\r\n      scene\r\n    )\r\n    \r\n    platform.position.y = 10;\r\n    platform.material = this.concreteMaterial;\r\n    platform.physicsImpostor = new PhysicsImpostor(platform,PhysicsImpostor.BoxImpostor,{mass:0, restitution: 0.1,friction:0.01}, scene);\r\n    this.sg.getShadowMap().renderList.push(platform);\r\n    platform.receiveShadows = true;\r\n    return platform;\r\n  }\r\n\r\n  createEgg(scene){\r\n    const defaultMaterial = new StandardMaterial('default-material', scene)\r\n    defaultMaterial.diffuseColor = new Color3(1, 1, 1)\r\n    const egg = SphereBuilder.CreateSphere(\r\n      'egg',\r\n      { diameter: 1.5, segments: 16 },\r\n      scene\r\n    );\r\n    egg.material = defaultMaterial;\r\n    egg.position.y = 15;\r\n    //egg.position.z = -this.levelDepth/2;\r\n    this.sg.getShadowMap().renderList.push(egg);\r\n    return egg;\r\n  }\r\n\r\n  createSphere(scene){\r\n    const defaultMaterial = new PBRMaterial('default-material', scene)\r\n    defaultMaterial.albedoColor = new Color3(1, 0, 0);\r\n    defaultMaterial.metallic = .9;\r\n    defaultMaterial.roughness = .3;\r\n    const sphere = SphereBuilder.CreateSphere('sphere', { diameter: 2 }, scene)\r\n    sphere.position.y = 2;\r\n    sphere.material = defaultMaterial;\r\n    if(ATTACH_CAMERA){\r\n      this.camera.parent = sphere;\r\n    }\r\n    sphere.physicsImpostor = new PhysicsImpostor(sphere,PhysicsImpostor.SphereImpostor,{mass:0.2,restitution: 0,friction:1,stiffness:0}, scene);\r\n    sphere.physicsImpostor.registerOnPhysicsCollide([this.platform.physicsImpostor,this.land.physicsImpostor], this.onSphereHitGround);\r\n    this.sg.getShadowMap().renderList.push(sphere);\r\n\r\n    return sphere;\r\n  }\r\n\r\n  setEggImpostor(scene){\r\n    this.egg.physicsImpostor = new PhysicsImpostor(this.egg,PhysicsImpostor.SphereImpostor,{mass:1, restitution: 0.2,friction:0.3}, this.scene);\r\n    this.sphere.physicsImpostor.registerOnPhysicsCollide(this.egg.physicsImpostor, this.onSphereHitEgg);\r\n  }\r\n  onSphereHitEgg = (main, collided) => {\r\n    this.egg.physicsImpostor.dispose();\r\n    this.egg.parent = this.sphere;\r\n    this.egg.position = new Vector3((2+1.5)/2,0,0);\r\n  }\r\n  onSphereHitGround = (main, collided) => {\r\n    if(Math.abs(this.sphere.physicsImpostor.getLinearVelocity().y) < 4){\r\n      this.touching = true;\r\n    }\r\n  }\r\n  onSpacePressed = () =>{\r\n    \r\n    //let horizImpulse = this.isNotSpeeding() ?this.keyDirection/2:0;\r\n    let boost = this.getBoost();\r\n    console.log(\"spacebar boost\"+boost);\r\n    this.sphere.physicsImpostor.applyImpulse(new Vector3(this.keyDirection*0.7*boost, 1, 0), this.sphere.getAbsolutePosition())\r\n    this.resetPosAndAngle();\r\n    this.touching = false;\r\n  }\r\n  getBoost(){\r\n    let vel = this.sphere.physicsImpostor.getLinearVelocity().x;\r\n    return vel/Math.abs(vel) === this.keyDirection ? 1 : 2;\r\n  }\r\n  isNotSpeeding(){\r\n    return this.sphere.physicsImpostor.getLinearVelocity().x*this.keyDirection < 7;\r\n  }\r\n  isTouchingGround(){\r\n    return this.touching;\r\n  }\r\n  onKeyDown = (e) => {\r\n    e.preventDefault();\r\n    if (e.key === \" \") {\r\n      this.onSpacePressed();\r\n    }else if(e.key === \"ArrowRight\"){\r\n      this.keyDirection = 1;\r\n      this.sphere.physicsImpostor.friction = 0.1;\r\n      this.land.physicsImpostor.friction = 0.1;\r\n      if(!this.accelerateInterval){\r\n        let self = this;\r\n        this.accelerateInterval = setInterval(()=>{\r\n          //console.log(\"setInterval accelerate\");\r\n          self.accelerate.apply(self);\r\n        },200);\r\n      }\r\n    }else if(e.key === \"ArrowLeft\"){\r\n      this.keyDirection = -1;\r\n      this.sphere.physicsImpostor.friction = 0.1;\r\n      this.land.physicsImpostor.friction = 0.1;\r\n      if(!this.accelerateInterval){\r\n        let self = this;\r\n        this.accelerateInterval = setInterval(()=>{\r\n          //console.log(\"setInterval accelerate\");\r\n          self.accelerate.apply(self);\r\n        },200);\r\n      }\r\n    }else if(e.key === \"AltGraph\"){\r\n      if(this.sphere.getChildren().includes(this.egg)){\r\n        console.log(\"AltGraph\");\r\n        this.egg.parent = null;\r\n        this.egg.position = this.sphere.getAbsolutePosition();\r\n        this.egg.position.x += 5*this.keyDirection;\r\n        this.setEggImpostor();\r\n        this.egg.position.z = 0;\r\n        let vel = this.egg.physicsImpostor.getLinearVelocity();\r\n        vel.z = 0;\r\n        this.egg.physicsImpostor.setLinearVelocity(vel);\r\n        this.egg.physicsImpostor.setAngularVelocity(new Vector3(0,0,0));\r\n        this.egg.rotation = new Vector3(0,0,0);\r\n        this.egg.physicsImpostor.applyImpulse(new Vector3(this.keyDirection*20, 0, 0), this.egg.getAbsolutePosition());\r\n\r\n      }\r\n    }\r\n  }\r\n  onKeyUp = (e) => {\r\n    e.preventDefault();\r\n    if(e.key === \"ArrowRight\" || e.key === \"ArrowLeft\"){\r\n      this.keyDirection = 0;\r\n      if(this.accelerateInterval){\r\n        console.log(\"clearInterval\");\r\n        clearInterval(this.accelerateInterval);\r\n        this.accelerateInterval = null;\r\n      }\r\n      this.sphere.physicsImpostor.friction = 1;\r\n      this.land.physicsImpostor.friction = 1;\r\n    }\r\n  }\r\n  resetPosAndAngle = () => {\r\n    let vel = this.sphere.physicsImpostor.getLinearVelocity();\r\n    vel.z = 0;\r\n    this.sphere.physicsImpostor.setLinearVelocity(vel);\r\n    this.sphere.position.z = 0;\r\n    this.sphere.physicsImpostor.setAngularVelocity(new Vector3(0,0,0));\r\n    this.sphere.rotation = new Vector3(0,0,0);\r\n  }\r\n  accelerate(){\r\n    this.resetPosAndAngle();\r\n    if( this.keyDirection !== 0 &&\r\n        this.isNotSpeeding() &&\r\n        this.isTouchingGround() ){\r\n      let boost = this.getBoost();\r\n      this.sphere.physicsImpostor.applyImpulse(new Vector3(this.keyDirection*1*boost, 0, 0), this.sphere.getAbsolutePosition());\r\n    }\r\n  }\r\n\r\n  showWorldAxis = ({ size, scene }) => {\r\n    const axisX = LinesBuilder.CreateLines(\r\n      'axisX',\r\n      {\r\n        points: [Vector3.Zero(), new Vector3(size, 0, 0)]\r\n      },\r\n      scene\r\n    )\r\n    axisX.color = new Color3(1, 0, 0)\r\n    const axisY = LinesBuilder.CreateLines(\r\n      'axisY',\r\n      {\r\n        points: [Vector3.Zero(), new Vector3(0, size, 0)]\r\n      },\r\n      scene\r\n    )\r\n    axisY.color = new Color3(0, 1, 0)\r\n    const axisZ = LinesBuilder.CreateLines(\r\n      'axisZ',\r\n      {\r\n        points: [Vector3.Zero(), new Vector3(0, 0, size)]\r\n      },\r\n      scene\r\n    )\r\n    axisZ.color = new Color3(0, 0, 1)\r\n  }\r\n\r\n  // initialise scene rendering\r\n  render(){\r\n    return <BabylonScene onSceneMount={this.onSceneMount} onKeyDown={this.onKeyDown} onKeyUp={this.onKeyUp} onRender={this.resetPosAndAngle}/>\r\n  }\r\n}\r\n\r\nexport default Playground\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Playground from './components/Playground'\n\nconst App = () => <Playground />\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}